# -*- coding: utf-8 -*-
"""FeynnLabs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YSE3Kb0NM5aMPHTKjZRCuIeBHXUkikAQ
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv('/content/Electric_Vehicle_Survey.csv')

# Display the first few rows of the dataset
print(data.head())

# Basic statistics for numeric columns
print(data.describe(include=[float, int]))
print(data.info())

# Data cleaning: Removing any rows with missing values
data = data.dropna()

# Data analysis
# 1. Distribution of Annual Income
plt.figure(figsize=(10, 6))
sns.countplot(x='Approx. Annual Income', data=data)
plt.title('Distribution of Annual Income')
plt.xlabel('Annual Income')
plt.ylabel('Count')
plt.show()

# 2. Distribution of Age
plt.figure(figsize=(10, 6))
sns.histplot(data['Age'], bins=10, kde=True)
plt.title('Distribution of Age')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

# 3. Preferred Vehicles by State
plt.figure(figsize=(12, 8))
sns.countplot(x='State / UT', hue='Which vehicles do you prefer?', data=data)
plt.title('Preferred Vehicles by State')
plt.xlabel('State / UT')
plt.ylabel('Count')
plt.legend(title='Preferred Vehicles')
plt.show()

# 4. Preferred Vehicles by Income Group
plt.figure(figsize=(12, 8))
sns.countplot(x='Approx. Annual Income', hue='Which vehicles do you prefer?', data=data)
plt.title('Preferred Vehicles by Income Group')
plt.xlabel('Approx. Annual Income')
plt.ylabel('Count')
plt.legend(title='Preferred Vehicles')
plt.show()

# 5. Analysis of Budget for Electric Vehicles
ev_data = data[data['Which vehicles do you prefer?'] == 'Electric Vehicles']
plt.figure(figsize=(10, 6))
sns.histplot(ev_data['Budget'], bins=10, kde=True)
plt.title('Budget Distribution for Electric Vehicles')
plt.xlabel('Budget')
plt.ylabel('Count')
plt.show()

# 6. Willingness to Switch from Combustion Vehicles to EVs by State
plt.figure(figsize=(12, 8))
sns.countplot(x='State / UT', hue='Are you willing to switch from Combustions Vehicles to EV?', data=data)
plt.title('Willingness to Switch from Combustion Vehicles to EVs by State')
plt.xlabel('State / UT')
plt.ylabel('Count')
plt.legend(title='Willing to Switch')
plt.show()

# 7. Preferred Electric Vehicle Type
plt.figure(figsize=(10, 6))
sns.countplot(x='What kind of Electric Vehicle do you want?', data=ev_data)
plt.title('Preferred Electric Vehicle Type')
plt.xlabel('Electric Vehicle Type')
plt.ylabel('Count')
plt.show()

# Summary of key insights
ev_count_by_state = ev_data['State / UT'].value_counts()
print('Number of EV preference by State/UT:')
print(ev_count_by_state)

# Identifying the states with the highest preference for EVs
top_states_for_evs = ev_count_by_state.head(5)
print('Top 5 states with the highest preference for EVs:')
print(top_states_for_evs)

# Clustering Analysis
# Encoding categorical features for clustering
df_encoded = pd.get_dummies(data[['Age', 'Approx. Annual Income', 'Budget', 'State / UT']], drop_first=True)

# Standardizing the data
scaler = StandardScaler()
df_encoded_scaled = scaler.fit_transform(df_encoded)

# Apply K-Means with the optimal number of clusters
optimal_clusters = 3  # Assuming 3 clusters based on the elbow method
kmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', max_iter=300, n_init=10, random_state=42)
data['Cluster'] = kmeans.fit_predict(df_encoded_scaled)

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=data, x='Age', y='Budget', hue='Cluster', palette='viridis', s=100)
plt.title('Clusters of Customers')
plt.xlabel('Age')
plt.ylabel('Budget')
plt.legend()
plt.show()

import pandas as pd

# Load the dataset
df = pd.read_csv('/content/Electric_Vehicle_Survey.csv')

# Check if required columns exist
required_columns = ['Age', 'Income', 'Region', 'Behavior']
for column in required_columns:
    if column not in df.columns:
        raise KeyError(f"Required column '{column}' is not present in the DataFrame")